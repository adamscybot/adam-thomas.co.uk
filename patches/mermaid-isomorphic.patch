diff --git a/dist/mermaid-isomorphic.js b/dist/mermaid-isomorphic.js
index aa5dc09a5dfb58a98d3f12cd2fc473caddd97b0d..8d593a0ed966e2cb59eb29546cbfcd27672cb058 100644
--- a/dist/mermaid-isomorphic.js
+++ b/dist/mermaid-isomorphic.js
@@ -1,8 +1,6 @@
 import { chromium } from 'playwright';
 const html = import.meta.resolve('../index.html');
-const mermaidScript = {
-    url: import.meta.resolve('mermaid/dist/mermaid.js')
-};
+
 const faStyle = {
     // We use url, not path. If we use path, the fonts canâ€™t be resolved.
     url: import.meta.resolve('@fortawesome/fontawesome-free/css/all.css')
@@ -27,7 +25,8 @@ async function renderDiagrams({ containerStyle, diagrams, mermaidConfig, prefix,
     container.style.overflow = 'hidden';
     Object.assign(container.style, containerStyle);
     document.body.append(container);
-    mermaid.initialize(mermaidConfig);
+    window.mermaid.initialize(mermaidConfig);
+    
     /**
      * Get an aria value form a referencing attribute.
      *
@@ -56,7 +55,7 @@ async function renderDiagrams({ containerStyle, diagrams, mermaidConfig, prefix,
     return Promise.allSettled(diagrams.map(async (diagram, index) => {
         const id = `${prefix}-${index}`;
         try {
-            const { svg } = await mermaid.render(id, diagram, container);
+            const { svg } = await window.mermaid.render(id, diagram, container);
             const root = parser.parseFromString(svg, 'text/html');
             const [element] = root.getElementsByTagName('svg');
             const { height, width } = element.viewBox.baseVal;
@@ -136,7 +135,14 @@ export function createMermaidRenderer(options = {}) {
         try {
             page = await context.newPage();
             await page.goto(html);
-            const promises = [page.addStyleTag(faStyle), page.addScriptTag(mermaidScript)];
+
+            // kick off downloads in parallel
+            const promises = [
+                page.addStyleTag(faStyle),
+            ];
+
+         
+
             const css = renderOptions?.css;
             if (typeof css === 'string' || css instanceof URL) {
                 promises.push(page.addStyleTag({ url: String(css) }));
@@ -146,7 +152,28 @@ export function createMermaidRenderer(options = {}) {
                     promises.push(page.addStyleTag({ url: String(url) }));
                 }
             }
+
             await Promise.all(promises);
+
+  
+
+            await page.addScriptTag({
+                type: 'module',
+               // mermaid is already on window from the previous script tag.
+               // The plugin is pure ESM, so we grab its *default* export.
+               content: `
+                    import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@11/dist/mermaid.esm.min.mjs';
+                    import elkLayouts from 'https://cdn.jsdelivr.net/npm/@mermaid-js/layout-elk@0/dist/mermaid-layout-elk.esm.min.mjs';
+                    // load and register the engine
+                    mermaid.registerLayoutLoaders(elkLayouts);
+                    mermaid.__isomorphic = true
+                    window.mermaid = mermaid
+                `
+            })
+
+            await page.waitForFunction(() => window.mermaid); 
+
+
             renderResults = await page.evaluate(renderDiagrams, {
                 // Avoid error TS2589: Type instantiation is excessively deep and possibly infinite.
                 containerStyle: (renderOptions?.containerStyle ?? {}),
@@ -158,6 +185,8 @@ export function createMermaidRenderer(options = {}) {
                 },
                 prefix: renderOptions?.prefix ?? 'mermaid'
             });
+
+      
             if (renderOptions?.screenshot) {
                 for (const result of renderResults) {
                     if (result.status === 'fulfilled') {
