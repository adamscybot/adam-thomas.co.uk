---
import type { HTMLAttributes } from 'astro/types'
import { css } from '../styled-system/css'
import BodyHeader from './BodyHeader.astro'
import FormattedDate from './FormattedDate.astro'
import { Circle } from '../styled-system/jsx'
import Tag from './Tag.astro'
import { token } from '../styled-system/tokens/index.mjs'

type ExperienceTransitionType =
  | 'none'
  | 'promotion'
  | 'acquisition'
  | 'new-role'

type Props = HTMLAttributes<'section'> & {
  org: string
  position: string
  startDate: Date
  endDate?: Date
  transitionType?: ExperienceTransitionType
  animationIndex: number
  last?: boolean
}

const animationEndProperties = css.raw({
  opacity: '[1]',
  transform: '[translateX(0px) translateY(0px) scale(1)]',
})

const animationEndRules = css.raw({
  '[data-animate] &, [data-animate-disable] &': {
    ...animationEndProperties,
  },

  'body:has([data-javascript-disabled]) &': {
    ...animationEndProperties,
  },

  _motionReduce: {
    ...animationEndProperties,
  },
})

const {
  org,
  position,
  startDate,
  endDate,
  transitionType = 'none',
  animationIndex,
  last = false,
  ...props
} = Astro.props
---

<section
  data-animation-group={animationIndex}
  class={css({
    mb: '16',
    display: 'flex',
    flexDir: 'column',
    position: 'relative',
    md: { flexDir: 'row' },
    _last: {
      '& [data-connector]': {
        display: 'none',
      },
    },
  })}
  {...props}
>
  <header
    class={css({ md: { mt: '-5', position: 'relative', display: 'initial' } })}
  >
    <div
      data-connector="source"
      class={css({
        display: 'flex',
        flexDir: 'column',
        alignItems: 'center',
        top: '0',
        bottom: '-5',
        position: 'absolute',
        left: '-6',

        md: {
          right: '[token(spacing.gutter.gap)]',
          left: '[unset]',
          bottom: '-10',
        },

        xl: {
          right: '[unset]',
          left: '[calc((token(spacing.gutter.gap) * -1) - token(sizes.connector.terminator))]',
        },
      })}
    >
      <div
        {...!last ? { 'data-animation-ends-group': true } : {}}
        data-connector-type={transitionType === 'new-role'
          ? 'discontinuous'
          : 'continuous'}
        class={css(
          {
            transform: '[translateX(0) translateY(0) scale(0)]',
            transformOrigin: 'top',
            h: 'full',

            '[data-animate] &': {
              transition: '[0.5s transform linear]',
            },

            "&[data-connector-type='discontinuous']": {
              w: '[calc(token(sizes.connector.line-width) * 2)]',
              backgroundImage: `[
              radial-gradient(circle at token(sizes.connector.line-width), token(colors.connector.line) calc(token(sizes.connector.line-width) / 2), rgba(255,255,255,0) token(sizes.connector.line-width)),
              radial-gradient(circle, token(colors.connector.line) calc(token(sizes.connector.line-width) / 2), rgba(255,255,255,0) token(sizes.connector.line-width)),
              radial-gradient(circle at token(sizes.connector.line-width), token(colors.connector.line) calc(token(sizes.connector.line-width) / 2), rgba(255,255,255,0) token(sizes.connector.line-width)),
              radial-gradient(circle, token(colors.connector.line) calc(token(sizes.connector.line-width) / 2), rgba(255,255,255,0) token(sizes.connector.line-width))]`,
              backgroundPosition: 'right',
              backgroundSize:
                '[calc(token(sizes.connector.line-width) * 2) token(spacing.connector.line-dot-gap)]',
              backgroundRepeat: 'repeat-y',
            },

            "&[data-connector-type='continuous']": {
              w: '[calc(token(sizes.connector.line-width))]',
              background: 'connector.line',
            },
          },
          animationEndRules,
        )}
      >
      </div>
      <div
        class={css(
          {
            mt: 'auto',
            paddingTop: 'connector.line-inset',
            transform: '[translateX(-50px)]',
            opacity: '[0]',

            '[data-animate] &': {
              transition: '[0.5s transform ease 0.5s, 0.5s opacity ease 0.5s]',
            },
          },
          animationEndRules,
        )}
      >
        <Circle
          size="connector.terminator"
          bg="bg"
          bottom="0"
          borderColor="connector.terminator"
          borderStyle="solid"
          borderWidth="[calc(token(sizes.connector.terminator) * token(sizes.connector.terminator-ring))]"
        />
      </div>
    </div>
    <div
      class={css({
        bg: 'bg',
        flex: 'initial',
        mb: '4',
        ml: '-3',
        pl: '3',
        position: 'relative',

        md: {
          mb: '5',
          pl: '0',
          mr: 'gutter.gap',
          width: '[token(spacing.gutter.width)]',
          textAlign: 'right',
          position: 'sticky',
          top: '0',
          pt: '5',
          alignSelf: 'baseline',
          borderLeftStyle: 'none',
        },
        xl: {
          ml: '[calc(token(spacing.gutter.width) * -1)]',
          flexBasis: 'gutter.width',
          width: 'auto',
        },
      })}
    >
      <div
        {...last ? { 'data-animation-ends-group': true } : {}}
        class={css(
          {
            display: 'flex',
            flexDir: 'column',

            transform: '[translateY(-100px)]',
            opacity: '[0]',

            '[data-animate] &': {
              transitionDelay: 'slower',
              transition: '[0.5s transform ease, 0.5s opacity ease]',
            },
          },
          animationEndRules,
        )}
      >
        <BodyHeader
          element="h3"
          css={{
            color: 'slate.300',
            fontSize: 'sm',
            mb: '0',
            textTransform: 'none',
          }}
        >
          {position}<br /><span
            class={css({
              fontSize: 'sm',
              fontWeight: 'medium',
            })}>{org}</span
          >
        </BodyHeader>
        <p
          class={css({
            textStyle: 'body',
            color: 'text.body',
            fontSize: 'sm',
          })}
        >
          <FormattedDate date={startDate} /> - {
            endDate ? <FormattedDate date={endDate} /> : 'Current'
          }
        </p>
        <div
          data-connector="destination"
          class={css({
            display: 'flex',
            position: 'absolute',
            flexDir: 'row-reverse',
            background: 'slate.950',
            alignItems: 'center',

            top: '-7',
            left: '-6',
            md: {
              py: 'connector.line-inset',
              flexDir: 'row',
              right: '0',
              bottom: '0',
              left: '[unset]',
              top: '[unset]',
              transform: '[translateY(100%)]',
            },
          })}
        >
          {
            transitionType === 'promotion' && (
              <Tag
                icon="teenyicons:double-caret-up-outline"
                style={{ background: token('colors.green.900') }}
              >
                Promoted
              </Tag>
            )
          }
          {
            transitionType === 'acquisition' && (
              <Tag
                icon="teenyicons:git-merge-solid"
                style={{ background: token('colors.blue.900') }}
              >
                Acquired
              </Tag>
            )
          }
          {
            transitionType === 'new-role' && (
              <Tag
                icon="teenyicons:refresh-outline"
                style={{ background: token('colors.purple.900') }}
              >
                New role
              </Tag>
            )
          }
          <Circle size="connector.terminator" bg="connector.terminator" />
        </div>
      </div>
    </div>
  </header>

  <div
    class={css(
      {
        flex: 'auto',
        opacity: '[0.2]',

        '[data-animate] &': {
          transition: '[0.5s transform ease, 0.5s opacity ease]',
        },
      },
      animationEndRules,
    )}
  >
    <slot />
  </div>
</section>
