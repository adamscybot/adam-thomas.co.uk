---
import type { CollectionEntry } from 'astro:content'
import Giscus from '@giscus/react'
import FormattedDate from '../components/FormattedDate.astro'
import Layout from './Layout.astro'
import { css } from '../styled-system/css'
import SectionLink from '../components/SectionLink.astro'

type Props = CollectionEntry<'blog'>['data']

const { title, description, pubDate, updatedDate, sectionLinks } = Astro.props
---

<script>
  function handleGiscusMessage(event: MessageEvent) {
    if (event.origin !== 'https://giscus.app') return
    if (!(typeof event.data === 'object' && event.data.giscus)) return

    const giscusData = event.data.giscus

    console.log(giscusData)
  }
  window.addEventListener('message', handleGiscusMessage)
</script>
<Layout title={title} ogTitle={title} description={description}>
  <Fragment slot="sub-nav">
    {
      sectionLinks?.map((sectionLink) => (
        <SectionLink href={`#${sectionLink.link}`}>
          {sectionLink.name}
        </SectionLink>
      ))
    }
  </Fragment>
  <article
    class={css({
      color: 'text.body',
      mb: '10',

      '& h1, & h2, & h3': {
        color: 'text.header',
        mb: '10',
        mt: '20',
      },

      '& h1': {
        textStyle: 'header1',
      },

      '& h2': {
        textStyle: 'header2',
      },

      '& h3': {
        textStyle: 'header3',
      },

      '& p': {
        textAlign: 'justify',
        textStyle: 'body',
        color: 'text.body',
        mb: '7',
        lineHeight: '[1.9]',
      },

      '& ul': {
        listStyleType: '[disc]',
        ml: '5',
        textAlign: 'left',
        textStyle: 'body',
        color: 'text.body',
        mb: '7',
        lineHeight: '[1.9]',
        pl: '0',
      },

      '& li': {
        mb: '5',
      },

      '& a': {
        textStyle: 'link',
        color: 'slate.50',
      },

      '& em': {
        fontStyle: 'italic',
      },
    })}
  >
    <div class="prose">
      <div class="title">
        <div class="date">
          <FormattedDate
            date={pubDate}
            options={{ year: 'numeric', day: 'numeric', month: 'long' }}
          />
          {
            updatedDate && (
              <div class="last-updated-on">
                Last updated on <FormattedDate date={updatedDate} />
              </div>
            )
          }
        </div>
        <h1 class={css({ mt: '[0 !important]' })}>{title}</h1>
      </div>
      <slot />
    </div>
  </article>

  <Giscus
    client:only="react"
    id="comments"
    repo="adamscybot/adam-thomas.co.uk"
    repoId="MDEwOlJlcG9zaXRvcnkzOTEzMTMwMjA="
    category="Announcements"
    categoryId="DIC_kwDOF1L2fM4B-hVS"
    mapping="specific"
    term={title}
    reactionsEnabled="1"
    emitMetadata="1"
    theme="dark"
    lang="en"
  />
</Layout>
