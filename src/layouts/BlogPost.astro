---
import 'remark-github-blockquote-alert/alert.css'
import type { CollectionEntry } from 'astro:content'
import Giscus from '@giscus/react'
import FormattedDate from '../components/FormattedDate.astro'
import Layout from './Layout.astro'
import { css } from '../styled-system/css'
import SectionLink from '../components/SectionLink.astro'
import '@fontsource-variable/fira-code'
import '@fontsource-variable/fira-code/wght.css'

type Props = CollectionEntry<'blog'>['data']

const { title, description, pubDate, updatedDate, sectionLinks } = Astro.props
---

<script>
  function handleGiscusMessage(event: MessageEvent) {
    if (event.origin !== 'https://giscus.app') return
    if (!(typeof event.data === 'object' && event.data.giscus)) return

    const giscusData = event.data.giscus

    console.log(giscusData)
  }
  window.addEventListener('message', handleGiscusMessage)
</script>
<Layout title={title} ogTitle={title} description={description}>
  <Fragment slot="sub-nav">
    {
      sectionLinks?.map((sectionLink) => (
        <SectionLink href={`#${sectionLink.link}`}>
          {sectionLink.name}
        </SectionLink>
      ))
    }
  </Fragment>
  <article
    class={css({
      color: 'text.body',
      mb: '10',

      '& *:not(.astro-code) > code': {
        backgroundColor: '[#2a3349]',
        padding: '[2px 7px]',
        margin: '[0px 2px]',
        whiteSpace: 'break-spaces',
        fontFamily:
          "[ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New']",
      },

      '& .expressive-code': {
        p: '3',
        mt: '6',
        mb: '6',

        '& code': {
          textStyle: 'code',
        },
      },

      '& .anchor-link': {
        visibility: 'hidden',
        textDecoration: 'none',
        opacity: '[0.6]',
        display: 'inline-block',
        position: 'relative',
        left: '2',
        width: '0',
      },

      '& .anchor:hover': {
        '& .anchor-link': {
          visibility: 'visible',
        },
      },

      '& .markdown-alert': {
        background: '[rgba(255, 255, 255, 0.05)]',
        paddingBlock: '[15px !important]',
      },

      '& h1, & h2, & h3, & h4': {
        color: 'text.header',
      },

      '& h1': {
        textStyle: 'header1',
        mb: '6',
        mt: '16',
      },

      '& h2': {
        textStyle: 'header2',
        mb: '6',
        mt: '16',
      },

      '& h3': {
        textStyle: 'header3',
        mb: '4',
        mt: '12',
      },

      '& h4': {
        textStyle: 'header4',
        mb: '4',
        mt: '8',
      },

      '& p': {
        textAlign: 'justify',
        textStyle: 'body',
        color: 'text.body',
        mb: '4',
      },

      '& svg.flowchart p': {
        fontSize: '[0.9rem]',
      },

      '& svg.flowchart': {
        margin: '[0 auto]',
        my: '7',
      },

      '& ol,ul': {
        ml: '6',
        textAlign: 'left',
        textStyle: 'body',
        color: 'text.body',
        mb: '7',
        lineHeight: '[1.9]',
        pl: '0',
        sm: {
          ml: '12',
        },
      },

      '& ul': {
        listStyleType: '[disc]',
      },

      '& ol': {
        listStyleType: '[decimal]',

        '& ol': {
          mb: '0',
        },
      },

      '& li': {
        mb: '1',
      },

      '& a': {
        textStyle: 'link',
        color: 'slate.50',
        '&:hover': {
          color: 'cyan.300',
        },
      },

      '& em': {
        fontStyle: 'italic',
      },

      '& img': {
        margin: '[0 auto]',
        mt: '7',
      },

      '& figcaption': {
        textAlign: 'center',
        pt: '2',
        textStyle: 'caption',
        px: '4',
      },

      '& figure': {
        mb: '8',
        display: 'flex',
        flexDir: 'column',
        alignItems: 'center',
      },
    })}
  >
    <div class="prose">
      <div class="title">
        <div class="date">
          <FormattedDate
            date={pubDate}
            options={{ year: 'numeric', day: 'numeric', month: 'long' }}
          />
          {
            updatedDate && (
              <div class="last-updated-on">
                Last updated on <FormattedDate date={updatedDate} />
              </div>
            )
          }
        </div>
        <h1 class={css({ mt: '[0 !important]' })}>{title}</h1>
      </div>
      <slot />
    </div>
  </article>

  <Giscus
    client:only="react"
    id="comments"
    repo="adamscybot/adam-thomas.co.uk"
    repoId="MDEwOlJlcG9zaXRvcnkzOTEzMTMwMjA="
    category="Announcements"
    categoryId="DIC_kwDOF1L2fM4B-hVS"
    mapping="specific"
    term={title}
    reactionsEnabled="1"
    emitMetadata="1"
    theme="dark"
    lang="en"
  />
</Layout>
